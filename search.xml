<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ROS通信机制</title>
      <link href="/2023/03/25/ros/ros-tong-xin-ji-zhi/"/>
      <url>/2023/03/25/ros/ros-tong-xin-ji-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="ROS通信机制"><a href="#ROS通信机制" class="headerlink" title="ROS通信机制"></a>ROS通信机制</h2><p>Ros是进程的分布式框架。这些进程可分布于不同的主机，不同主机协同工作，以分散计算压力。<br>不同的进程是如何进行通信的呢？（如何实现数据交换）这就需要通信机制了。</p><ol><li>话题通信（发布订阅模式）</li><li>服务通信（请求相应）</li><li>参数服务器（参数共享）</li></ol><h3 id="话题通信"><a href="#话题通信" class="headerlink" title="话题通信"></a>话题通信</h3><ol><li>Ros Master管理者</li><li>Talker发布者</li><li>Listerner订阅者</li></ol><p><img src="https://cdn.jsdelivr.net/gh/KJjjj0/image_bg@master/20230328213408.png"></p><h4 id="实现步骤："><a href="#实现步骤：" class="headerlink" title="实现步骤："></a>实现步骤：</h4><ol start="0"><li>Talker注册<br> Talker 启动后，会通过 RPC 在 ROS Master 中注册自身信息，其中包含所发布消息的话题名称。 ROS Master 会将节点的注册信息加入到注册表中。</li><li>Listener注册<br> Listener 启动后，也会通过 RPC 在 ROS Master 中注册自身信息，包含需要订阅消息的话题名。 ROS Master 会将节点的注册信息加入到注册表中。</li><li>ROS Master 实现信息匹配</li><li>Listener向 Talker 发送请求<br> Listener 根据接收到的 RPC 地址，通过 RPC 向 Talker 发送连接请求，传输订阅的话题名称、消息类型以及通信协议( TCP &#x2F; UDP )。</li><li>Talker确认请求<br> Talker 接收到 Listener 的请求后，也是通过 RPC 向 Listener 确认连接信息，并发送自身的TCP地址信息。</li><li>Listener与 Talker 建立连接<br> Listener 根据步骤4返回的消息使用 TCP 与 Talker 建立网络连接。</li><li>Talker向 Listener 发送消息<br>连接建立后， Talker 开始向 Listener 发布消息。</li></ol><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>注意1：上述实现流程中，前五步使用的 RPC 协议，最后两步使用的是 TCP 协议<br>注意2:Talker与 Listener 的启动无先后顺序要求注意3:Talker与 Listener 都可以有多个<br>注意4: Talker 与 Listener 连接建立后，不再需要 ROS Master 。也即，即便关闭 ROS Master , Talker 与 Listern 照常通信。</p><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><h5 id="需求："><a href="#需求：" class="headerlink" title="需求："></a>需求：</h5><p>编写发布订阅实现，要求发布方以10HZ（每秒10次）的频率发布文本消息，订阅方订阅消息并将消息内容打印输出。</p><h5 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h5><p>在模型实现中， ROS master 不需要实现，而连接的建立也已经被封装了，需要关 关键点有三个：<br>1．发布方2．接收方<br>3．数据（此处为普通文本）流程：<br>1．编写发布方实现；2．编写订阅方实现；<br>3．编辑配置文件：<br>4．编译并执行。</p><h5 id="发送方"><a href="#发送方" class="headerlink" title="发送方"></a>发送方</h5><p>1、话题通信 ROS<br>(1）编写发布方实现：<br>需求：实现基本的话题通信，一方发布数据，一方接收数据，<br>实现的关键点：<br>1．发送方<br>2．接收方<br>3．数据（此处为普通文本）<br>    二者需要设置相同的话题消息发布方：<br>循环发布信息： HelloWorld 后缀数字编号实现流程：<br>1．包含头文件<br>2．初始化 ROS 节点：命名（唯一）<br>3．实例化 ROS 句柄<br>4．实例化发布者对象<br>5．组织被发布的数据，并编写逻辑发布数据</p><pre><code>talker.cpp</code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/*实现流程:        1.包含头文件         2.初始化 ROS 节点:命名(唯一)        3.实例化 ROS 句柄        4.实例化 发布者 对象        5.组织被发布的数据，并编写逻辑发布数据*/</span><span class="token comment">// 1.包含头文件 </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ros/ros.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"std_msgs/String.h"</span> <span class="token comment">//普通文本类型的消息</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sstream></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span>  <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token comment">//设置编码</span>    <span class="token function">setlocale</span><span class="token punctuation">(</span>LC_ALL<span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//2.初始化 ROS 节点:命名(唯一)</span>    <span class="token comment">// 参数1和参数2 后期为节点传值会使用</span>    <span class="token comment">// 参数3 是节点名称，是一个标识符，需要保证运行后，在 ROS 网络拓扑中唯一</span>    ros<span class="token double-colon punctuation">::</span><span class="token function">init</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span>argv<span class="token punctuation">,</span><span class="token string">"talker"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//3.实例化 ROS 句柄</span>    ros<span class="token double-colon punctuation">::</span>NodeHandle nh<span class="token punctuation">;</span><span class="token comment">//该类封装了 ROS 中的一些常用功能</span>    <span class="token comment">//4.实例化 发布者 对象</span>    <span class="token comment">//泛型: 发布的消息类型</span>    <span class="token comment">//参数1: 要发布到的话题</span>    <span class="token comment">//参数2: 队列中最大保存的消息数，超出此阀值时，先进的先销毁(时间早的先销毁)</span>    ros<span class="token double-colon punctuation">::</span>Publisher pub <span class="token operator">=</span> nh<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">advertise</span><span class="token generic class-name"><span class="token operator">&lt;</span>std_msgs<span class="token double-colon punctuation">::</span>String<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token string">"chatter"</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//5.组织被发布的数据，并编写逻辑发布数据</span>    <span class="token comment">//数据(动态组织)</span>    std_msgs<span class="token double-colon punctuation">::</span>String msg<span class="token punctuation">;</span>    <span class="token comment">// msg.data = "你好啊！！！";</span>    std<span class="token double-colon punctuation">::</span>string msg_front <span class="token operator">=</span> <span class="token string">"Hello 你好！"</span><span class="token punctuation">;</span> <span class="token comment">//消息前缀</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//消息计数器</span>    <span class="token comment">//逻辑(一秒10次)</span>    ros<span class="token double-colon punctuation">::</span>Rate <span class="token function">r</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//节点不死</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>ros<span class="token double-colon punctuation">::</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">//使用 stringstream 拼接字符串与编号</span>        std<span class="token double-colon punctuation">::</span>stringstream ss<span class="token punctuation">;</span>        ss <span class="token operator">&lt;&lt;</span> msg_front <span class="token operator">&lt;&lt;</span> count<span class="token punctuation">;</span>        msg<span class="token punctuation">.</span>data <span class="token operator">=</span> ss<span class="token punctuation">.</span><span class="token function">str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//发布消息</span>        pub<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//加入调试，打印发送的消息</span>        <span class="token function">ROS_INFO</span><span class="token punctuation">(</span><span class="token string">"发送的消息:%s"</span><span class="token punctuation">,</span>msg<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//根据前面制定的发送贫频率自动休眠 休眠时间 = 1/频率；</span>        r<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        count<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//循环结束前，让 count 自增</span>        <span class="token comment">//暂无应用</span>        ros<span class="token double-colon punctuation">::</span><span class="token function">spinOnce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="订阅方"><a href="#订阅方" class="headerlink" title="订阅方"></a>订阅方</h5><p>(2）编写订阅方实现：<br>需求：实现基本的话题通信，一方发布数据，一方接收数据，实现的关键点：<br>1．发送方<br>2．接收方<br>3．数据（此处为普通文本）消息订阅方：<br>订阅话题并打印接收到的消息实现流程：<br>1．包含头文件<br>2．初始化 ROS 节点：命名（唯一）<br>3．实例化 ROS 句柄<br>4．实例化订阅者对象<br>5．处理订阅的消息（回调函数）<br>6．设置循环调用回调函数</p><pre><code>listener.cpp</code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/*    需求: 实现基本的话题通信，一方发布数据，一方接收数据，         实现的关键点:         1.发送方         2.接收方         3.数据(此处为普通文本)    消息订阅方:        订阅话题并打印接收到的消息     实现流程:        1.包含头文件        2.初始化 ROS 节点:命名(唯一)        3.实例化 ROS 句柄        4.实例化 订阅者 对象        5.处理订阅的消息(回调函数)        6.设置循环调用回调函数  */</span><span class="token comment">// 1.包含头文件</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ros/ros.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"std_msgs/String.h"</span></span><span class="token keyword">void</span> <span class="token function">doMsg</span><span class="token punctuation">(</span><span class="token keyword">const</span> std_msgs<span class="token double-colon punctuation">::</span>String<span class="token double-colon punctuation">::</span>ConstPtr<span class="token operator">&amp;</span> msg_p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">ROS_INFO</span><span class="token punctuation">(</span><span class="token string">"我听见:%s"</span><span class="token punctuation">,</span>msg_p<span class="token operator">-></span>data<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// ROS_INFO("我听见:%s",(*msg_p).data.c_str());</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span>  <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">setlocale</span><span class="token punctuation">(</span>LC_ALL<span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//2.初始化 ROS 节点:命名(唯一)</span>    ros<span class="token double-colon punctuation">::</span><span class="token function">init</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span>argv<span class="token punctuation">,</span><span class="token string">"listener"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//3.实例化 ROS 句柄</span>    ros<span class="token double-colon punctuation">::</span>NodeHandle nh<span class="token punctuation">;</span>    <span class="token comment">//4.实例化 订阅者 对象</span>    ros<span class="token double-colon punctuation">::</span>Subscriber sub <span class="token operator">=</span> nh<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">subscribe</span><span class="token generic class-name"><span class="token operator">&lt;</span>std_msgs<span class="token double-colon punctuation">::</span>String<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token string">"chatter"</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span>doMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//5.处理订阅的消息(回调函数)</span>    <span class="token comment">//     6.设置循环调用回调函数</span>    ros<span class="token double-colon punctuation">::</span><span class="token function">spin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//循环读取接收的数据，并调用回调函数处理</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="配置CmakeLists-txt文件"><a href="#配置CmakeLists-txt文件" class="headerlink" title="配置CmakeLists.txt文件"></a>配置CmakeLists.txt文件</h5><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt"># add_executable($&#123;PROJECT_NAME&#125;_node src/talkerToListener_node.cpp)add_executable(talker src/talker.cpp)add_executable(listener src/listenner.cpp)target_link_libraries(talker    $&#123;catkin_LIBRARIES&#125;  )  target_link_libraries(listener    $&#123;catkin_LIBRARIES&#125;  )<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h5><pre><code>roscore</code></pre><p><img src="https://cdn.jsdelivr.net/gh/KJjjj0/image_bg@master/20230328220307.png"></p><pre><code>source ./devel/setup.bashrosrun talkerToListener talker</code></pre><p><img src="https://cdn.jsdelivr.net/gh/KJjjj0/image_bg@master/20230328220406.png"></p><h3 id="话题通信自定义-msg"><a href="#话题通信自定义-msg" class="headerlink" title="话题通信自定义 msg"></a>话题通信自定义 msg</h3><h4 id="定义-msg-文件"><a href="#定义-msg-文件" class="headerlink" title="定义 msg 文件"></a>定义 msg 文件</h4><p>在功能包下新建 msg 目录，添加文件 Person . msg</p><pre class="line-numbers language-none"><code class="language-none">string name uint16 age float64 height <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="编辑配置文件"><a href="#编辑配置文件" class="headerlink" title="编辑配置文件"></a>编辑配置文件</h4><p>在 package . xml 中添加编译依赖与执行依赖</p><pre class="line-numbers language-none"><code class="language-none">&lt; build _ depend &gt; message _ generation &lt;&#x2F; build _ depend &gt;&lt; exec _ depend &gt; message _ runtime &lt;&#x2F; exec _ depend &gt;&lt;!--exce _ depend 以前对应的是 run _ depend 现在非法--&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="vscode配置"><a href="#vscode配置" class="headerlink" title="vscode配置"></a>vscode配置</h4><p>c_cpp_properties.json配置文件默认是不会产生的，ctrl+shift+p 再输入configuration选择后便会出现。</p><p><img src="https://cdn.jsdelivr.net/gh/KJjjj0/image_bg@master/20230404211404.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/KJjjj0/image_bg@master/20230404211217.png"></p><pre class="line-numbers language-none"><code class="language-none">&#123;  &quot;configurations&quot;: [    &#123;      &quot;browse&quot;: &#123;        &quot;databaseFilename&quot;: &quot;$&#123;default&#125;&quot;,        &quot;limitSymbolsToIncludedHeaders&quot;: false      &#125;,      &quot;includePath&quot;: [        &quot;&#x2F;opt&#x2F;ros&#x2F;noetic&#x2F;include&#x2F;**&quot;,        &quot;&#x2F;usr&#x2F;include&#x2F;**&quot;,        &quot;&#x2F;home&#x2F;kjjj&#x2F;demo03_ws&#x2F;devel&#x2F;include&#x2F;**&quot;&#x2F;&#x2F;配置head文件的路径      ],      &quot;name&quot;: &quot;ROS&quot;,      &quot;intelliSenseMode&quot;: &quot;gcc-x64&quot;,      &quot;compilerPath&quot;: &quot;&#x2F;usr&#x2F;bin&#x2F;gcc&quot;,      &quot;cStandard&quot;: &quot;gnu11&quot;,      &quot;cppStandard&quot;: &quot;c++14&quot;    &#125;  ],  &quot;version&quot;: 4&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行成功<br><img src="https://cdn.jsdelivr.net/gh/KJjjj0/image_bg@master/20230404223438.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> Ros机器人实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ros </tag>
            
            <tag> Python </tag>
            
            <tag> C++ </tag>
            
            <tag> LInux </tag>
            
            <tag> xml </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VScode运行Ros</title>
      <link href="/2023/03/21/ros/vscode-yun-xing-ros/"/>
      <url>/2023/03/21/ros/vscode-yun-xing-ros/</url>
      
        <content type="html"><![CDATA[<p><strong>ROS是开源的，是用于机器人的一种后操作系统，或者说次级操作系统</strong>。 它提供类似操作系统所提供的功能，包含硬件抽象描述、底层驱动程序管理、共用功能的执行、程序间的消息传递、程序发行包管理，它也提供一些工具程序和库用于获取、建立、编写和运行多机整合的程序。 ROS的首要设计目标是在机器人研发领域提高代码复用率。</p><hr><h1 id="VScode安装"><a href="#VScode安装" class="headerlink" title="VScode安装"></a>VScode安装</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>vscode下载：[网址]:<a href="https://code.visualstudio.com/docs?start=true">https://code.visualstudio.com/docs?start=true</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>1、双击安装即可<br>2、sudo dpkg -i xxxx.deb</p><h2 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h2><pre class="line-numbers language-none"><code class="language-none">sudo dpkg --purge code<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="VScode使用"><a href="#VScode使用" class="headerlink" title="VScode使用"></a>VScode使用</h1><h2 id="创建ROS工作空间"><a href="#创建ROS工作空间" class="headerlink" title="创建ROS工作空间"></a>创建ROS工作空间</h2><pre class="line-numbers language-none"><code class="language-none">mkdir -p xxx_ws&#x2F;srccd xxx_wscatkin_make<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="启动VScode"><a href="#启动VScode" class="headerlink" title="启动VScode"></a>启动VScode</h2><pre class="line-numbers language-none"><code class="language-none">cd xxx_wscode .   #点之前有个空格<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="VScode-编译ros程序"><a href="#VScode-编译ros程序" class="headerlink" title="VScode 编译ros程序"></a>VScode 编译ros程序</h2><p>快捷键ctrl+shift+B<br>选择catkin_make:build</p><p><strong>注意这里需要下载几个插件</strong><br><img src="https://cdn.jsdelivr.net/gh/KJjjj0/image_bg@master/20230321211243.png"><br><img src="https://cdn.jsdelivr.net/gh/KJjjj0/image_bg@master/20230321211332.png"></p><h1 id="测试（以C-为例）"><a href="#测试（以C-为例）" class="headerlink" title="测试（以C++为例）"></a>测试（以C++为例）</h1><h2 id="创建功能包"><a href="#创建功能包" class="headerlink" title="创建功能包"></a>创建功能包</h2><p><img src="https://cdn.jsdelivr.net/gh/KJjjj0/image_bg@master/20230321211623.png" alt="image.png"></p><h2 id="新建源文件"><a href="#新建源文件" class="headerlink" title="新建源文件"></a>新建源文件</h2><p>在功能包目录下src中新建xxx.cpp<br>输入以下代码</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&quot;ros&#x2F;ros.h&quot;int main(int argc,char *argv[])&#123;    setlocale(LC_ALL,&quot;&quot;);    ros::init(argc,argv,&quot;HelloVSCode&quot;);    ROS_INFO(&quot;Hello VSCode!!!hahahaha&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="配置CmakeLists-txt文件"><a href="#配置CmakeLists-txt文件" class="headerlink" title="配置CmakeLists.txt文件"></a>配置CmakeLists.txt文件</h2><p>修改如下<br><img src="https://cdn.jsdelivr.net/gh/KJjjj0/image_bg@master/20230321212243.png"></p><p>以下是py文件配置<br><img src="https://cdn.jsdelivr.net/gh/KJjjj0/image_bg@master/20230321212322.png"></p><h2 id="编译执行"><a href="#编译执行" class="headerlink" title="编译执行"></a>编译执行</h2><p>+一个终端<br><img src="https://cdn.jsdelivr.net/gh/KJjjj0/image_bg@master/20230321212456.png"><br>再加一个终端</p><p><img src="https://cdn.jsdelivr.net/gh/KJjjj0/image_bg@master/20230321212518.png"><br>如上编译成功</p><h1 id="launch文件实现多个节点编译"><a href="#launch文件实现多个节点编译" class="headerlink" title="launch文件实现多个节点编译"></a>launch文件实现多个节点编译</h1><h2 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h2><p>在功能包下创建launch文件夹<br>在该文件夹下可创建launch文件<br><img src="https://cdn.jsdelivr.net/gh/KJjjj0/image_bg@master/20230321212748.png"></p><h2 id="编译launch文件内容"><a href="#编译launch文件内容" class="headerlink" title="编译launch文件内容"></a>编译launch文件内容</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>launch</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>node</span> <span class="token attr-name">pkg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>kj_mpkg<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hello<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hello<span class="token punctuation">"</span></span> <span class="token attr-name">output</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>screen<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>node</span> <span class="token attr-name">pkg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>turtlesim<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>turtlesim_node<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>t1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>node</span> <span class="token attr-name">pkg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>turtlesim<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>turtle_teleop_key<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>key1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>launch</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/KJjjj0/image_bg@master/20230321212949.png"><br>第一个是编写的C++hello节点，第二个是小乌龟测试节点，第三个是鼠标节点。</p><h2 id="实现运行多个节点"><a href="#实现运行多个节点" class="headerlink" title="实现运行多个节点"></a>实现运行多个节点</h2><p><img src="https://cdn.jsdelivr.net/gh/KJjjj0/image_bg@master/20230321213033.png"></p><p><img src="https://cdn.jsdelivr.net/gh/KJjjj0/image_bg@master/20230321213038.png"><br>运行成功！</p>]]></content>
      
      
      <categories>
          
          <category> Ros机器人实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ros </tag>
            
            <tag> Python </tag>
            
            <tag> C++ </tag>
            
            <tag> LInux </tag>
            
            <tag> xml </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通信</title>
      <link href="/2023/03/20/ros/tong-xin/"/>
      <url>/2023/03/20/ros/tong-xin/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Ros机器人实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ros </tag>
            
            <tag> Python </tag>
            
            <tag> C++ </tag>
            
            <tag> LInux </tag>
            
            <tag> xml </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot配置</title>
      <link href="/2023/03/07/springboot/springboot-pei-zhi/"/>
      <url>/2023/03/07/springboot/springboot-pei-zhi/</url>
      
        <content type="html"><![CDATA[<hr><p>Spring Boot是Spring家族的成员，它是一个全新的框架，它的设计目的是尽可能简单和快速的开发、运行Spring应用程序，简化配置。它为开发者快捷的使用Spring及相关开发框架提供了便利，但是它并不是微服务的框架，它只是为微服务框架的使用也提供了很好的脚手架。初学者操作，仅供参考</p><h1 id="Maven初始化设置"><a href="#Maven初始化设置" class="headerlink" title="Maven初始化设置"></a>Maven初始化设置</h1><h2 id="jdk"><a href="#jdk" class="headerlink" title="jdk"></a>jdk</h2><p>在<strong>New Project</strong>对话框的左侧选中<strong>Maven</strong>，选择JDK版本，这里选择的是1.8.0.<br>即可点击<strong>Next</strong>到下一步<br><img src="https://cdn.jsdelivr.net/gh/KJjjj0/image_bg@master/20230325230703.png"></p><h2 id="project设置"><a href="#project设置" class="headerlink" title="project设置"></a>project设置</h2><p><img src="https://cdn.jsdelivr.net/gh/KJjjj0/image_bg@master/20230325231021.png"></p><h2 id="添加并使用依赖项"><a href="#添加并使用依赖项" class="headerlink" title="添加并使用依赖项"></a>添加并使用依赖项</h2><p>默认打开如下<br><img src="https://cdn.jsdelivr.net/gh/KJjjj0/image_bg@master/20230325231524.png"><br>如2自动打开一个xml脚本文件，该文件在项目的根目录下，项目中需要添加依赖时，相关的代码就需要配置在这个文件中。<br>1中文件有main和test两个文件夹，<strong>main</strong>文件夹用于存放正式使用的相关文件，例如Java类、各种配置文件等，<strong>test</strong>用于存放开发过程中测试时使用的文件，当项目最终编译、打包、部署到服务器时，<strong>test</strong>文件夹下的所有内容将不会参与这个过程。</p><h3 id="在pom-xml文件中添加如下"><a href="#在pom-xml文件中添加如下" class="headerlink" title="在pom.xml文件中添加如下"></a>在pom.xml文件中添加如下</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--引入SpringBoot依赖--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.3.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>      <span class="token comment">&lt;!--web场景依赖启动器--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="如果显示错误"><a href="#如果显示错误" class="headerlink" title="如果显示错误"></a>如果显示错误</h3><p>选中project右键<br><img src="https://cdn.jsdelivr.net/gh/KJjjj0/image_bg@master/20230325234247.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ros基础</title>
      <link href="/2023/03/05/ros/ji-ben-ming-ling/"/>
      <url>/2023/03/05/ros/ji-ben-ming-ling/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Ros机器人实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ros </tag>
            
            <tag> Python </tag>
            
            <tag> C++ </tag>
            
            <tag> LInux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 本地仓库到github</title>
      <link href="/2023/03/01/git/git-ben-di-cang-ku-dao-github/"/>
      <url>/2023/03/01/git/git-ben-di-cang-ku-dao-github/</url>
      
        <content type="html"><![CDATA[<h1 id="上传步骤"><a href="#上传步骤" class="headerlink" title="上传步骤"></a>上传步骤</h1><pre class="line-numbers language-none"><code class="language-none">1.git init &#x2F;&#x2F;工作空间创建.git文件夹（默认隐藏了该文件夹） 2.git add . &#x2F;&#x2F;添加到暂存区 3.git commit -m &quot;你的提交注释注释&quot; 4.git remote add origin http:&#x2F;&#x2F;xxxxxxxxx.git &#x2F;&#x2F;本地仓库和远程github关联 5.git pull --rebase origin master &#x2F;&#x2F;远程有readme.md，拉一下 (感觉没必要)6.git push -u origin master &#x2F;&#x2F;代码合并<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="错误解决办法"><a href="#错误解决办法" class="headerlink" title="错误解决办法"></a>错误解决办法</h1><h2 id="TLS-certificate-verification-has-been-disabled-错误"><a href="#TLS-certificate-verification-has-been-disabled-错误" class="headerlink" title="TLS certificate verification has been disabled!错误"></a>TLS certificate verification has been disabled!错误</h2><p><img src="https://cdn.jsdelivr.net/gh/KJjjj0/image_bg@master/20230321162745.png"></p><pre class="line-numbers language-none"><code class="language-none">git config --global http.sslVerify true<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>[参考]<a href="https://www.cnblogs.com/wuhairui/p/15701177.html">https://www.cnblogs.com/wuhairui/p/15701177.html</a></p><h2 id="git-push错误failed-to-push-some-refs-to"><a href="#git-push错误failed-to-push-some-refs-to" class="headerlink" title="git push错误failed to push some refs to"></a>git push错误failed to push some refs to</h2><p><img src="https://cdn.jsdelivr.net/gh/KJjjj0/image_bg@master/20230321163002.png"><br>输入：</p><pre class="line-numbers language-none"><code class="language-none">git pull --rebase origin master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>成功解决：<br><img src="https://cdn.jsdelivr.net/gh/KJjjj0/image_bg@master/20230321163404.png"><br>[参考]<a href="https://blog.csdn.net/qq_39416311/article/details/102219428">https://blog.csdn.net/qq_39416311/article/details/102219428</a></p>]]></content>
      
      
      <categories>
          
          <category> Git入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> cmd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安卓环境配置</title>
      <link href="/2023/03/01/an-zhuo/an-zhuo-kai-fa-huan-jing-pei-zhi/"/>
      <url>/2023/03/01/an-zhuo/an-zhuo-kai-fa-huan-jing-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="jdk配置"><a href="#jdk配置" class="headerlink" title="jdk配置"></a>jdk配置</h1><h2 id="下载jdk"><a href="#下载jdk" class="headerlink" title="下载jdk"></a>下载jdk</h2><p>下载 java 开发工具包 JDK，下载地址：<a href="https://www.oracle.com/java/technologies/downloads/%E3%80%82">https://www.oracle.com/java/technologies/downloads/。</a></p><p>一定要下载对应版本的jdk</p><p><img src="https://cdn.jsdelivr.net/gh/KJjjj0/image_bg@master/20230321124900.png"></p><h2 id="安装android-studio"><a href="#安装android-studio" class="headerlink" title="安装android studio"></a>安装android studio</h2><p>一直点next<img src="https://cdn.jsdelivr.net/gh/KJjjj0/image_bg@master/20230321125915.png" alt="image-20230321125915655">**</p><p><img src="https://cdn.jsdelivr.net/gh/KJjjj0/image_bg@master/20230321130307.png"></p><p>再点击finish</p><h2 id="安装sdk"><a href="#安装sdk" class="headerlink" title="安装sdk"></a>安装sdk</h2><p>默认安装对应版本的sdk</p><p><img src="https://cdn.jsdelivr.net/gh/KJjjj0/image_bg@master/20230321130540.png"></p><p><img src="https://cdn.jsdelivr.net/gh/KJjjj0/image_bg@master/20230321130843.png"></p><h2 id="创建模拟器"><a href="#创建模拟器" class="headerlink" title="创建模拟器"></a>创建模拟器</h2><p>首先选择创建一个new project</p><p><img src="https://cdn.jsdelivr.net/gh/KJjjj0/image_bg@master/20230321131235.png"></p><p>选择语言和兼容的安卓版本</p><p><img src="https://cdn.jsdelivr.net/gh/KJjjj0/image_bg@master/20230321131421.png"></p><p>创建成功<br><img src="https://cdn.jsdelivr.net/gh/KJjjj0/image_bg@master/20230321131554.png"></p><h2 id="安装安卓模拟器"><a href="#安装安卓模拟器" class="headerlink" title="安装安卓模拟器"></a>安装安卓模拟器</h2><p>1、这里使用的是夜神模拟器<br><img src="https://cdn.jsdelivr.net/gh/KJjjj0/image_bg@master/20230321141014.png"></p><p>2、安装成功<br><img src="https://cdn.jsdelivr.net/gh/KJjjj0/image_bg@master/20230321141457.png" alt="image.png"></p><p>类似手游模拟器，随便找一个熟悉能模拟安卓环境的就行<br>或者使用搁置的安卓手机。</p>]]></content>
      
      
      <categories>
          
          <category> Android入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue开发基础</title>
      <link href="/2022/12/07/vue-kai-fa-ji-chu/"/>
      <url>/2022/12/07/vue-kai-fa-ji-chu/</url>
      
        <content type="html"><![CDATA[<h1 id="脚手架安装"><a href="#脚手架安装" class="headerlink" title="脚手架安装"></a>脚手架安装</h1><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><pre><code> 1、vue create 221109_cli_demo 2、$ cd 221109_cli_demo 3、$ npm run serve</code></pre>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web入门——文本基础</title>
      <link href="/2022/12/07/wen-ben-ji-chu/"/>
      <url>/2022/12/07/wen-ben-ji-chu/</url>
      
        <content type="html"><![CDATA[<h1 id="Html"><a href="#Html" class="headerlink" title="Html"></a>Html</h1><h2 id="文本基础"><a href="#文本基础" class="headerlink" title="文本基础"></a>文本基础</h2><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4>   <ol>        <li>沿着这条路走到头</li>        <li>jiuzoubudaole</li>    </ol><h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4><ul>    <li>沿着这条路走到头</li>    <li>jiuzoubudaole</li></ul><h3 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">></span></span>斜体<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span>粗体<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Web入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Html </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
